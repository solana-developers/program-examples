/**
 * @title Counter Program Tests
 * @description Test suite for the Solana Counter Program using Anchor framework
 */

import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { CounterProgram } from "../target/types/counter_program";
import { assert } from "chai";

/**
 * Test suite for the counter program functionality
 * Tests initialization and increment operations on a counter account
 */
describe("counter program", () => {
  // Configure the client to use the local cluster
  const provider = anchor.AnchorProvider.env();
  anchor.setProvider(provider);
  
  /**
   * The Counter Program instance obtained from the Anchor workspace
   */
  const program = anchor.workspace.CounterProgram as Program<CounterProgram>;

  /**
   * Program Derived Address (PDA) for the counter account
   * Generated using:
   * - "counter" string as seed
   * - User's public key as seed
   * - Program ID as seed
   */
  const counterPDA = anchor.web3.PublicKey.findProgramAddressSync(
    [
      anchor.utils.bytes.utf8.encode("counter"),
      provider.wallet.publicKey.toBuffer()
    ],
    program.programId
  )[0];

  /**
   * Test case: Initialize a new counter account
   * 
   * @description Creates a new counter account at the PDA address
   * and verifies that its initial count is set to 0
   */
  it("Initialize counter", async () => {
    const txid = await program.methods
      .initialize()
      .accounts({
        authority: provider.wallet.publicKey, // The user's wallet that will own the counter
        counter: counterPDA,                  // The PDA where counter data will be stored
      })
      .rpc();
    console.log("Initialize tx:", txid);

    // Verify the counter state
    const counterState = await program.account.counter.fetch(counterPDA);
    assert.ok(counterState.count.eq(new anchor.BN(0)), "Counter should initialize to 0");
  });

  /**
   * Test case: Increment the counter
   * 
   * @description Increments the counter value by 1 and verifies
   * that the new value is correctly updated
   */
  it("Increment counter", async () => {
    const txid = await program.methods
      .increment()
      .accounts({
        authority: provider.wallet.publicKey, // The user's wallet that owns the counter
        counter: counterPDA,                  // The PDA where counter data is stored
      })
      .rpc();
    console.log("Increment tx:", txid);

    // Verify the counter state
    const counterState = await program.account.counter.fetch(counterPDA);
    assert.ok(counterState.count.eq(new anchor.BN(1)), "Counter should be incremented to 1");
  });
});